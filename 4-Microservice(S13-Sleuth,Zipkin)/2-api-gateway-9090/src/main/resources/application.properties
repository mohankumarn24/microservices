server.port=9090
spring.application.name=api-gateway

eureka.client.service-url.defaultZone=http://localhost:8761/eureka
spring.zipkin.base-url=http://localhost:9411

# auto configure routes
# Refer L111: Building-microservices-with-spring-boot-and-spring-cloud
# locator.enabled: route request to appropriate service
# Eureka Server provides service names in Upper Case. lower-case-service-id=true enables services to look for service names in lower case
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

spring.sleuth.reactor.instrumentation-type=decorate-on-each


# How it works step-by-step:
# Startup phase:
#  - Your Spring Boot service reads this property.
#  - It contacts the Eureka Server at that URL (localhost:8761/eureka).
# 
# Registration:
#  - It sends a registration request with metadata:
#  - appName, instanceId, port, status, etc.
#  - The Eureka Server stores this info in its registry.
# 
# Heartbeat:
#  - Every ~30 seconds (by default), the client sends a heartbeat to say:
#  - “I’m still alive.”
# 
# Discovery:
#  - The client also fetches the registry from the server (if fetch-registry=true).
#  - That’s how it learns about other services it can talk to — e.g. USER-SERVICE, ORDER-SERVICE, etc.

# eureka.client.service-url.defaultZone: Tells the app where the Eureka Server is located
#  - @EnableEurekaServer automatically registers Spring MVC endpoints under /eureka/**
#  - These endpoints handle: 
#     - Service registration (/eureka/apps/{appName})
#     - Heartbeats (/eureka/apps/{appName}/{instanceId})
#     - Fetching registry (/eureka/apps)
#     - This happens regardless of whether the server itself is a client.

# spring.cloud.gateway.discovery.locator.enabled    -> Enables automatic route discovery in Spring Cloud Gateway
#  - If you have services USER-SERVICE and ORDER-SERVICE registered in Eureka, Gateway will automatically create routes like:
#       - http://gateway-host/user-service/**   → forwards to USER-SERVICE
#       - http://gateway-host/order-service/**  → forwards to ORDER-SERVICE

# spring.cloud.gateway.discovery.locator.lower-case-service-id
#  - Converts service IDs to lowercase when creating Gateway routes
#  - Service registered in Eureka: USER-SERVICE
#  - Gateway route becomes: /user-service/** instead of /USER-SERVICE/**

# spring.sleuth.reactor.instrumentation-type
#  - Configures Spring Cloud Sleuth’s Reactor instrumentation for tracing reactive streams (like WebFlux used by Gateway)
#  - Sleuth properly traces all reactive calls through Gateway

# Sleuth = automatic, end-to-end tracing + trace IDs in logs for microservices.
# Without Sleuth:
#   - [INFO] Processing request GET /orders
# With Sleuth:
#   - [INFO] [traceId=abc123, spanId=xyz789] Processing request GET /orders

#############################################################################################
# How Sleuth + Zipkin work together:
# Spring Cloud Sleuth
#  - Adds trace IDs and span IDs to your logs.
#  - Propagates these IDs across microservices via HTTP headers.
#  - Optionally reports them to a tracing backend like Zipkin.
# 
# Zipkin
#  - Receives trace data from Sleuth.
#  - Stores it in a database.
#  - Provides a UI to visualize traces:
#     -- Shows all services a request touched.
#     -- Shows timing per service/span.
#     -- Shows latency hotspots.
# 
# How it looks in practice:
# 1. Request enters Gateway
#     - Sleuth creates a trace ID and a span.
# 2. Gateway calls user-service
#     - Sleuth propagates the same trace ID.
#     - user-service creates a new span for its work.
# 3. user-service calls order-service
#     - Sleuth continues propagation.
# 4. Zipkin UI
#     - You can see a timeline view of the trace:
#        [Gateway] -> [User-Service] -> [Order-Service]
#     - Each service span shows start time, duration, status.
# 
# Summary:
# | Component | Role                                                         |
# | --------- | ------------------------------------------------------------ |
# | Sleuth    | Adds trace/span IDs to logs, propagates them across services |
# | Zipkin    | Collects, stores, and visualizes traces                      |
#############################################################################################
