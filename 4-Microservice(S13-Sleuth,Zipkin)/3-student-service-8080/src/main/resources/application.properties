server.port=8080
spring.application.name=student-service

address.service.url=http://localhost:8082
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
spring.zipkin.base-url=http://localhost:9411

# closed - UP
# open - DOWN
# half-open - UNKNOWN
resilience4j.circuitbreaker.instances.addressService.sliding-window-size=10
resilience4j.circuitbreaker.instances.addressService.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.addressService.wait-duration-in-open-state=30000
resilience4j.circuitbreaker.instances.addressService.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.addressService.permitted-number-of-calls-in-half-open-state=5

resilience4j.circuitbreaker.instances.addressService.register-health-indicator=true
resilience4j.circuitbreaker.instances.addressService.allow-health-indicator-to-fail=true

management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always

## db properties
spring.datasource.url=jdbc:postgresql://localhost:5432/mydb
spring.jpa.properties.hibernate.default_schema=microservices
spring.datasource.username=postgres
spring.datasource.password=password
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
# spring.jpa.show-sql=true
# spring.jpa.generate-ddl=true
# spring.jpa.hibernate.ddl-auto=create


# resilience4j.circuitbreaker.instances.addressService.register-health-indicator
# Purpose:
#   - Registers a Spring Boot health indicator for this circuit breaker
# How it works:
#   - Spring Boot’s actuator/health endpoint can report the status of various components (db, diskSpace, circuit breakers, etc.).
#   - Setting this property to true makes the circuit breaker for addressService appear in /actuator/health.
# Benefit:
#   - You can monitor the health of your circuit breakers alongside other components in Spring Boot Actuator.

# resilience4j.circuitbreaker.instances.addressService.allow-health-indicator-to-fail
# Purpose:
#   - Controls what happens if the health indicator itself fails.
# How it works:
#   - Normally, if a health indicator throws an exception, Spring Boot might mark the whole /health as DOWN.
#   - Setting allow-health-indicator-to-fail=true ensures that even if the circuit breaker health indicator fails, the overall health endpoint doesn’t fail catastrophically.
# Use case:
#   - Useful in production environments where you don’t want a temporary circuit breaker issue to mark your app as unhealthy.

# | Property                              | Meaning                                                             |
# | ------------------------------------- | ------------------------------------------------------------------- |
# | 'register-health-indicator=true'      | Expose circuit breaker status in '/actuator/health'                 |
# | 'allow-health-indicator-to-fail=true' | Don’t break the health endpoint if the CB health check itself fails |

# management.health.circuitbreakers.enabled=true
# Purpose:
#   - Enables circuit breaker health indicators in Spring Boot Actuator.
# How it works:
#   - If you are using Resilience4j (or Spring Cloud Circuit Breakers), this property ensures that the health of each circuit breaker is included in /actuator/health.
#   - You can see whether a circuit breaker is UP, DOWN, or OPEN.

# management.endpoints.web.exposure.include=health
#   - Tells Spring Boot which Actuator endpoints to expose over HTTP.
#   - Only the endpoints listed here are available externally (by default, only info and health are exposed).
#   - Setting it to health means /actuator/health is available via HTTP.

# management.endpoint.health.show-details=always
# Purpose:
#  - Controls how much detail is shown in the health endpoint.
# Options:
# | Value             | Meaning                                                                                                          |
# | ----------------- | ---------------------------------------------------------------------------------------------------------------- |
# | 'never'           | Don’t show details, only 'UP' or 'DOWN'                                                                          |
# | 'when-authorized' | Show details only if the user is authenticated/authorized                                                        |
# | 'always'          | Show **full details** always (includes all component statuses, including circuit breakers, DB, disk space, etc.) |
# Why useful:
#   - For monitoring or debugging, you want to see all details, like circuit breaker states, failure rates, etc.

